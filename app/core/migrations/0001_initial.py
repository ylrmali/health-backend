# Generated by Django 4.2 on 2023-12-24 20:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, help_text='Enter your email address', max_length=255, unique=True, verbose_name='email address')),
                ('phone', models.CharField(db_index=True, help_text='Enter your phone number', max_length=10)),
                ('age', models.CharField(help_text='Enter your age', max_length=3)),
                ('profile_pic', models.ImageField(blank=True, help_text='Upload your profile picture', null=True, upload_to='profile_pics/')),
                ('address', models.TextField(blank=True, help_text='Enter your address', null=True)),
                ('city', models.CharField(blank=True, help_text='Enter your city', max_length=50, null=True)),
                ('access_code', models.CharField(help_text='User access code', max_length=6)),
                ('is_verified', models.BooleanField(default=False, help_text='Account verification status')),
                ('trusted_ip', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, null=True, size=None, verbose_name='trusted ip')),
                ('last_online', models.DateTimeField(blank=True, help_text='Last online time', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Branch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Branch name', max_length=50, unique=True, verbose_name='branch name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(db_index=True, help_text='Membership name', max_length=50, unique=True, verbose_name='membership name')),
                ('price', models.DecimalField(decimal_places=2, help_text='Membership price', max_digits=10, verbose_name='membership price')),
                ('duration', models.SmallIntegerField(help_text='Membership duration as day', verbose_name='membership duration as day')),
                ('discount', models.SmallIntegerField(blank=True, help_text='Membership discount as percentage', null=True, verbose_name='membership discount as percentage')),
                ('description', models.TextField(help_text='Membership description', verbose_name='membership description')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identity_number', models.CharField(db_index=True, help_text='Enter your identity number', max_length=11)),
                ('credit_card', models.JSONField(blank=True, help_text='Patient credit card information', null=True, verbose_name='patient credit card information')),
                ('medical_history', models.JSONField(blank=True, help_text='Patient medical history', null=True, verbose_name='patient medical history')),
                ('medication_history', models.JSONField(blank=True, help_text='Patient medication history', null=True, verbose_name='patient medication history')),
                ('allergies', models.JSONField(blank=True, help_text='Patient allergies', null=True, verbose_name='patient allergies')),
                ('emergency_contact', models.JSONField(blank=True, help_text='Patient emergency contact', null=True, verbose_name='patient emergency contact')),
                ('membership', models.OneToOneField(blank=True, help_text='Patient membership', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='membership', to='core.membership', verbose_name='patient membership')),
                ('user', models.OneToOneField(help_text='Patient user', on_delete=django.db.models.deletion.CASCADE, related_name='patient_user', to=settings.AUTH_USER_MODEL, verbose_name='patient user')),
            ],
            options={
                'verbose_name': 'patient_user',
                'verbose_name_plural': 'patient_users',
                'db_table': 'core_patient',
            },
        ),
        migrations.CreateModel(
            name='ManagerUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(help_text='Manager user', on_delete=django.db.models.deletion.CASCADE, related_name='manager_user', to=settings.AUTH_USER_MODEL, verbose_name='manager user')),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch', models.ForeignKey(help_text='Doctor branch', on_delete=django.db.models.deletion.CASCADE, related_name='branch', to='core.branch', verbose_name='doctor branch')),
                ('user', models.OneToOneField(help_text='Doctor user', on_delete=django.db.models.deletion.CASCADE, related_name='doctor_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'doctor_user',
                'verbose_name_plural': 'doctor_users',
                'db_table': 'core_doctor',
            },
        ),
    ]
